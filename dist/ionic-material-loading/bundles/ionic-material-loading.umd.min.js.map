{"version":3,"sources":["ng://ionic-material-loading/lib/loading.service.ts","ng://ionic-material-loading/lib/progress-bar/progress-bar.component.ts","ng://ionic-material-loading/lib/fab/fab.component.ts","ng://ionic-material-loading/lib/button/button.component.ts","ng://ionic-material-loading/lib/item/item.component.ts","ng://ionic-material-loading/lib/content/content.component.ts","ng://ionic-material-loading/lib/infinite-scroll-content/infinite-scrollt-content.component.ts","ng://ionic-material-loading/lib/loading.module.ts"],"names":["LoadingService","BehaviorSubject","this","loading","isComplete","prototype","load","loadChange","next","unload","toggleSpinner","complete","console","log","completeChange","Injectable","args","providedIn","ProgressBar","loadingService","EventEmitter","ngOnInit","_this","global","subscribe","ngOnDestroy","unsubscribe","onRefresh","emit","fillAnimationComplete","onComplete","Component","selector","template","animations","trigger","transition","style","height","animate","left","width","Input","Output","ViewChild","FabSpinner","icon","fillAnimationDone","event","fromState","checkmark","iconState","postComplete","changeIconAndReveal","transform","opacity","state","stroke-dasharray","stroke-dashoffset","transformOrigin","stroke","ButtonFull","progress","onRefreshComplete","ItemProgress","ContentRefresh","fromEvent","document","res","pulling","refreshing","changeProgress","spinRefresher","spinner","nativeElement","setProperty","doRefresh","setTimeout","target","refresh","completeRefresh","onPull","getProgress","onProgressChanged","onStart","translateY","toState","spinnerVisible","onSpinnerHidden","showHint","hintVisible","onHintClicked","postHint","InfiniteScrollContent","renderer","change","dragProgress","Math","floor","detectChanges","Renderer2","ChangeDetectorRef","LoadingModule","NgModule","imports","IonicModule","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n\n  public loading: boolean = false;\n  public isComplete: boolean = false;\n  public loadChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.loading);\n  public completeChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.isComplete);\n\n\n  constructor() { }\n\n  load() {\n    this.loading = true;\n    this.loadChange.next(this.loading);\n  }\n\n  unload() {\n    this.loading = false;\n    this.loadChange.next(this.loading);\n    this.isComplete = false;\n  }\n\n  toggleSpinner() {\n    this.loading = !this.loading;\n  }\n\n  complete(){\n    console.log('set service complete');\n    this.isComplete = true;\n    this.completeChange.next(this.isComplete);\n  }\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, EventEmitter, Output, OnDestroy } from '@angular/core';\nimport { animate, style, transition, trigger } from \"@angular/animations\";\nimport { LoadingService } from '../loading.service';\n\n\n@Component({\n    selector: 'gg-loading-progressbar',\n    template: `\n<div [@progressAnim] *ngIf=\"(!global && loading) || (global && loadingService.loading)\" class=\"slider\">\n  <div *ngIf=\"!isComplete\" class=\"line\"></div>\n  <div *ngIf=\"!isComplete\" class=\"subline inc\"></div>\n  <div [@fillAnim] (@fillAnim.done)=\"fillAnimationComplete(isComplete)\" *ngIf=\"isComplete\" class=\"subline fill\"></div>\n  <div *ngIf=\"!isComplete\" class=\"subline dec\"></div>\n</div>\n    `,\n    styles: [`.slider{position:absolute;width:100%;height:5px;overflow-x:hidden;z-index:5000}.line{position:absolute;opacity:.4;background:var(--ion-color-primary);width:150%;height:5px}.subline{position:absolute;background:var(--ion-color-primary);height:5px}.inc{-webkit-animation:1.6s infinite increase;animation:1.6s infinite increase}.dec{-webkit-animation:1.6s .4s infinite decrease;animation:1.6s .4s infinite decrease}.fill{left:0;width:100%}@-webkit-keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@-webkit-keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}`],\n    animations: [\n        trigger('progressAnim', [\n            transition('void => *', [\n                style({ height: '0px' }),\n                animate('250ms ease-out')\n            ]),\n            transition('* => void', [\n                animate('299ms ease-in', style({ height: '0px' }))\n            ])\n        ]),\n        trigger('fillAnim', [\n            transition('void => *', [\n                style({ left: '-5%', width: '5%' }),\n                animate('850ms ease-out', style({ left: '0%', width: '100%' }))\n            ]),\n        ])\n    ]\n})\nexport class ProgressBar implements OnInit, OnDestroy {\n\n    loading: boolean = false;\n    @Input() global: boolean = false;\n    @Input() isComplete: boolean = false;\n    @Output() onComplete: EventEmitter<boolean> = new EventEmitter<boolean>();\n    @Output() onRefresh: EventEmitter<ProgressBar> = new EventEmitter<ProgressBar>();\n\n    @ViewChild('bar') bar: ElementRef;\n\n    constructor(public loadingService: LoadingService) {\n    }\n\n    ngOnInit() {\n        if (this.global) {\n            this.loadingService.completeChange.subscribe(isComplete => {\n                if (isComplete) {\n                    this.complete();\n                }\n            })\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.global) {\n            this.loadingService.completeChange.unsubscribe();\n        }\n    }\n\n    toggleSpinner() {\n        this.loading = !this.loading;\n    }\n\n    load() {\n        this.loading = true;\n        this.onRefresh.emit(this);\n    }\n\n    unload() {\n        this.loading = false;\n        if (this.isComplete) {\n            this.isComplete = false;\n        }\n    }\n\n    complete() {\n        console.log('set complete');\n        this.isComplete = true;\n        console.log(this.isComplete);\n    }\n\n    fillAnimationComplete(isComplete: boolean) {\n        if (isComplete) {\n            console.log('fill animation complete', isComplete);\n            this.onComplete.emit(isComplete);\n            this.isComplete = false;\n            if (this.global) {\n                this.loadingService.unload();\n            } else {\n                this.unload();\n            }\n        }\n    }\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { animate, style, transition, trigger, state } from \"@angular/animations\";\nimport { fromEvent } from 'rxjs';\n\n\n@Component({\n    selector: 'gg-loading-fab',\n    template: `\n        <ion-fab [@fabAnim] [vertical]=\"vertical\" [horizontal]=\"horizontal\" [edge]=\"edge\">\n        <svg *ngIf=\"loading\" #spinner class=\"spinner rotate\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle [@fillAnim]=\"isComplete ? 'fill' : 'spinning'\" (@fillAnim.done)=\"fillAnimationDone($event)\" [ngClass]=\"{'path': !isComplete}\" fill=\"none\" stroke-width=\"4\" stroke-linecap=\"round\" cx=\"36\" cy=\"36\" r=\"32\"></circle>\n </svg>\n            <ion-fab-button [color]=\"fabColor\">\n                <ion-icon [@rotateAnim]=\"iconState\" (@rotateAnim.done)=\"changeIconAndReveal($event,'md-checkmark')\" [name]=\"icon\"></ion-icon>\n            </ion-fab-button>\n\n        </ion-fab>\n    `,\n    styles: [`ion-spinner{position:absolute;top:-8px;left:-8px;width:72px;height:72px}.spinner{position:absolute;width:72px;height:72px;left:-8px;top:-8px}.rotate{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}@-webkit-keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}@keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}.path{stroke-dasharray:187;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors;animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors}.fill{stroke-dasharray:360;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-out fill;animation:1.4s ease-out fill;stroke:#1b9a59}@-webkit-keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@-webkit-keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}`],\n    animations: [trigger('fabAnim', [\n        transition('void => *', [\n            style({ transform: 'scale(0)' }),\n            animate('250ms ease-out')\n        ]),\n        transition('* => void', [\n            animate('250ms ease-in', style({ transform: 'scale(0)' }))\n        ])\n    ]),\n    trigger('spinnerAnim', [\n        transition('void => *', [\n            style({ opacity: '0' }),\n            animate('250ms ease-out')\n        ]),\n        transition('* => void', [\n            animate('250ms ease-in', style({ opacity: '0' }))\n        ])\n    ]),\n    trigger('rotateAnim', [\n        transition('normal => rotate', [\n            animate('125ms ease-out')\n        ]),\n        transition('rotate => normal', [\n            animate('125ms ease-in')\n        ]),\n        state('rotate', style({ opacity: '0', transform: 'rotateZ(45deg)' })),\n        state('normal', style({ opacity: '1', transform: 'rotateZ(0deg)' }))\n    ]),\n    trigger('fillAnim', [\n        transition('* => fill', [\n            style({\n                'stroke-dasharray': 180,\n                'stroke-dashoffset': 90,\n                'transformOrigin': 'center',\n                'stroke': '#DE3E35'\n            }),\n            animate('1400ms ease-out')\n        ]),\n        state('fill', style({\n            'stroke-dasharray': 315,\n            'stroke-dashoffset': 0,\n            'transformOrigin': 'center',\n            'stroke': '#1B9A59',\n            'opacity': 0\n        })\n        )]\n    )],\n\n})\nexport class FabSpinner implements OnInit {\n\n    @Input() icon: string;\n    @Input() spinColor: string;\n    @Input() fabColor: string;\n    @Input() vertical: string = \"bottom\";\n    @Input() horizontal: string = \"end\";\n    @Input() edge: boolean = false;\n    @Input() checkmark: boolean = false;\n    loading: boolean = false;\n    isComplete: boolean = false;\n    iconState: string = 'normal';\n\n    @ViewChild('spinner') spinner: ElementRef;\n\n    @Output() onComplete: EventEmitter<FabSpinner> = new EventEmitter<FabSpinner>();\n    @Output() onRefresh: EventEmitter<FabSpinner> = new EventEmitter<FabSpinner>();\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    toggleSpinner() {\n        if(this.icon != 'md-checkmark'){\n            this.loading = !this.loading;\n        }\n    }\n\n    load() {\n        this.loading = true;\n        this.onRefresh.emit(this);\n    }\n\n    unload() {\n        this.loading = false;\n    }\n\n    complete() {\n        if(this.loading){\n            this.isComplete = true;\n\n        }\n    }\n\n    fillAnimationDone(event) {\n        if (event.fromState == 'spinning') {\n            if (this.checkmark) {\n                console.log('fill animation done', event);\n                this.iconState = \"rotate\";\n            } else {\n                this.postComplete();\n            }\n        }\n    }\n\n    changeIconAndReveal(event, icon: string) {\n        console.log(event, icon);\n        if (event.fromState == 'normal') {\n            this.icon = icon;\n            this.iconState = \"normal\";\n        } else {\n            if (event.fromState === \"rotate\") {\n                this.postComplete();\n            }\n\n        }\n    }\n\n    postComplete() {\n        this.unload();\n        this.isComplete = false;\n        this.onComplete.emit(this);\n    }\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { ProgressBar } from '../progress-bar/progress-bar.component';\n\n\n@Component({\n    selector: 'gg-loading-button',\n    template: `\n    <gg-loading-progressbar (onComplete)=\"onComplete($event)\" #progress [global]=\"false\"></gg-loading-progressbar>\n    <ion-button [expand]=\"expand\" [color]=\"color\">\n    <ng-content></ng-content>\n  </ion-button>\n    `,\n    styles: [`:host{position:relative;display:block;margin:0 20px;width:calc(100% - 40px)}`],\n\n})\nexport class ButtonFull implements OnInit {\n\n    loading: boolean = false;\n\n    @ViewChild('progress') progress: ProgressBar;\n    @Input() color: string = 'light';\n    @Input() expand: string = 'block';\n    @Output() onRefresh: EventEmitter<ButtonFull> = new EventEmitter();\n    @Output() onRefreshComplete: EventEmitter<ButtonFull> = new EventEmitter();\n\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    toggleSpinner() {\n        this.loading = !this.loading;\n        this.progress.toggleSpinner();\n        this.onRefresh.emit(this);\n    }\n\n    load() {\n        this.loading = true;\n        this.progress.load();\n    }\n\n    unload() {\n        this.loading = false;\n        this.progress.unload();\n    }\n\n    complete() {\n        if (this.loading) {\n            this.progress.complete();\n        }\n    }\n\n    onComplete(isComplete: boolean) {\n        console.log('on complete', isComplete);\n        this.loading = false;\n        this.onRefreshComplete.emit(this);\n    }\n}\n","import { Component, Input, OnInit, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { animate, style, transition, trigger } from \"@angular/animations\";\nimport { ProgressBar } from '../progress-bar/progress-bar.component';\n\n\n@Component({\n    selector: 'gg-loading-item',\n    template: `\n    <ion-item [ngClass]=\"{'loading': loading}\">\n    <ng-content></ng-content>\n  </ion-item>\n  <gg-loading-progressbar (onComplete)=\"onComplete($event)\" #progress [global]=\"false\"></gg-loading-progressbar>\n\n    `,\n    styles: [`:host{position:relative;display:block;margin:0;width:calc(100%)}ion-item{background:#fff}.loading{margin:4px;width:calc(100% - 8px);transition:.2s;border-radius:8px;-webkit-transform:translateZ(0);transform:translateZ(0);box-shadow:0 4px 16px rgba(0,0,0,.12)}`],\n\n})\nexport class ItemProgress implements OnInit {\n\n    loading: boolean = false;\n\n    @ViewChild('progress') progress: ProgressBar;\n    @Output() onRefreshComplete: EventEmitter<ItemProgress> = new EventEmitter<ItemProgress>();\n    @Output() onRefresh: EventEmitter<ItemProgress> = new EventEmitter<ItemProgress>();\n\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    toggleSpinner() {\n        this.loading = !this.loading;\n        this.progress.toggleSpinner();\n    }\n\n    load() {\n        this.loading = true;\n        this.progress.load();\n    }\n\n    unload() {\n        this.loading = false;\n        this.progress.unload();\n    }\n\n    complete() {\n        if (this.loading) {\n            this.progress.complete();\n        }\n    }\n\n    onComplete(isComplete: boolean) {\n        console.log('on complete', isComplete);\n        this.loading = false;\n        this.onRefreshComplete.emit(this);\n    }\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { animate, style, transition, trigger, state } from \"@angular/animations\";\nimport { fromEvent } from 'rxjs';\n\n\n\n@Component({\n    selector: 'gg-loading-content',\n    template: `\n    <div class=\"gg-hint-wrapper\">\n    <ion-chip *ngIf=\"hintVisible\" (click)=\"onHintClicked()\" [@hintAnim] (@hintAnim.done)=\"postHint($event)\" #hint class=\"gg-hint-container\">\n  <ion-icon class=\"icon\" name=\"md-arrow-up\"></ion-icon>\n  <ion-label class=\"text\">{{hintText}}</ion-label>\n</ion-chip>\n    </div>\n    \n    <div [@spinnerAnim] (@spinnerAnim.done)=\"onSpinnerHidden($event)\" *ngIf=\"spinnerVisible\" #spinner class=\"gg-spinner-container\">\n        <svg class=\"spinner rotate\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle [@fillAnim]=\"isComplete ? 'fill' : 'spinning'\" (@fillAnim.done)=\"fillAnimationDone($event)\" [ngClass]=\"{'path': !isComplete}\" fill=\"none\" stroke-width=\"4\" stroke-linecap=\"round\" cx=\"36\" cy=\"36\" r=\"32\"></circle>\n        </svg>\n    </div>\n    <ion-content #content fullscreen>\n        <ion-refresher (ionStart)=\"onStart()\" [snapbackDuration]=\"280\" [closeDuration]=\"280\" [pullMax]=\"168\" [pullMin]=\"112\" [disabled]=\"false\" slot=\"fixed\" (ionRefresh)=\"doRefresh($event)\" (ionPull)=\"onPull($event)\">\n        </ion-refresher>\n\n        <ng-content></ng-content>\n    </ion-content>\n    `,\n    styles: [`.spinner{position:absolute;width:24px;height:24px;left:8px;top:8px}.rotate{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}@-webkit-keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}@keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}.path{stroke-dasharray:187;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors;animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors}.fill{stroke-dasharray:360;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-out fill;animation:1.4s ease-out fill;stroke:#1b9a59}@-webkit-keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@-webkit-keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}.gg-spinner-container{width:40px;height:40px;position:absolute;left:calc(50% - 20px);top:0;z-index:9;background:var(--ion-color-light);border-radius:50%;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1)}.gg-hint-container{height:40px;padding-left:8px;padding-right:8px;position:relative;background:var(--ion-color-light);border-radius:40px;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1);margin:0}.icon{height:20px;width:20px;background:0 0;color:var(--ion-color-dark)}.text{font-size:1em;color:var(--ion-color-dark)}.gg-hint-wrapper{width:100%;position:absolute;top:112px;z-index:8;text-align:center}`],\n    animations: [\n        trigger('fillAnim', [\n            transition('* => fill', [\n                style({\n                    'stroke-dasharray': 180,\n                    'stroke-dashoffset': 90,\n                    'transformOrigin': 'center',\n                    'stroke': '#DE3E35'\n                }),\n                animate('360ms ease-out')\n            ]),\n            state('fill', style({\n                'stroke-dasharray': 315,\n                'stroke-dashoffset': 0,\n                'transformOrigin': 'center',\n                'stroke': '#1B9A59',\n            })\n            )]\n        ),\n        trigger('spinnerAnim', [\n            transition('* => void', [\n                animate('250ms ease-out', style({ opacity: 0 }))\n            ]),\n        ]),\n        trigger('hintAnim', [\n            transition('void => *', [\n                style({ opacity: 0, transform: 'translateY(-80px)' }),\n                animate('150ms ease-in', style({ opacity: 1, transform: 'translateY(0)' }))\n            ]),\n            transition('* => void', [\n                style({ width: '112px' }),\n                animate('125ms ease-out', style({ width: '40px' }))\n            ]),\n        ]\n        ),\n    ],\n\n})\nexport class ContentRefresh implements OnInit {\n\n    @Output() onProgressChanged: EventEmitter<number> = new EventEmitter();\n    @Output() onRefresh: EventEmitter<ContentRefresh> = new EventEmitter();\n    @ViewChild('spinner') spinner: ElementRef;\n    @ViewChild('content') content: ElementRef;\n    isComplete = false;\n    pulling: boolean = false;\n    refreshing: boolean = false;\n    spinnerVisible: boolean = true;\n    translateY: number = 0;\n    hintVisible: boolean = false;\n    @Input() hintText: string = 'new posts';\n\n\n    ngOnInit() {\n\n        fromEvent(document, 'touchend').subscribe(res => {\n            console.log('touchend', res);\n            if (this.pulling && !this.refreshing) {\n                this.changeProgress(0);\n            }\n        });\n\n    }\n\n    constructor() {\n    }\n\n    spinRefresher() {\n        this.spinner.nativeElement.style.setProperty('transform', `translateY(112px)`);\n        this.refreshing = true;\n        this.pulling = false;\n    }\n\n    doRefresh(event) {\n        this.spinRefresher();\n        console.log('refresh here');\n        setTimeout(() => {\n            event.target.complete();\n        }, 140);\n        this.refresh();\n\n    }\n\n    refresh() {\n        this.onRefresh.emit(this);\n    }\n\n    completeRefresh() {\n        this.refreshing = false;\n        this.isComplete = true;\n    }\n\n    onPull(event) {\n        this.pulling = true;\n        console.log(event);\n        const progress = event.target.getProgress();\n        if (progress <= 1) {\n            this.onProgressChanged.emit(progress);\n            this.changeProgress(progress);\n\n        }\n    }\n\n    onStart() {\n        // this.changeProgress(0);\n    }\n\n    public changeProgress(progress: number) {\n        this.translateY = 112 * progress;\n        const translateY = this.translateY;\n        console.log(`translateY(${translateY}px)`);\n        // this.renderer.setStyle(this.spinner.nativeElement, 'transform', `translateY(${translateY})`)\n        this.spinner.nativeElement.style.setProperty('transform', `translateY(${translateY}px)`);\n        // this.change.detectChanges();\n    }\n\n    fillAnimationDone(event) {\n\n        if (event.toState === 'fill' && event.fromState === 'spinning') {\n            console.log('fillAnim complete', event);\n\n            this.spinnerVisible = false;\n            this.isComplete = false;\n        }\n    }\n\n    onSpinnerHidden(event) {\n        if (event.fromState !== 'void') {\n            console.log('refresh complete', event);\n            this.spinnerVisible = true;\n        }\n\n    }\n\n    showHint() {\n        this.hintVisible = true;\n    }\n\n    onHintClicked() {\n        console.log('on hint clicked');\n        this.hintVisible = false;\n    }\n\n    postHint(event) {\n        console.log(event);\n        if (!event.fromState && event.toState == 'void') {\n            this.refresh();\n            this.spinRefresher();\n\n        }\n    }\n\n\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, Output, EventEmitter, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { animate, style, transition, trigger, state } from \"@angular/animations\";\nimport { fromEvent } from 'rxjs';\n\n\n@Component({\n    selector: 'gg-loading-infinite-scroll',\n    template: `\n    <div class=\"gg-refresher\">\n\n    <div #spinner class=\"gg-spinner-container\">\n    <svg class=\"spinner rotate\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle [@fillAnim]=\"isComplete ? 'fill' : 'spinning'\" (@fillAnim.done)=\"fillAnimationDone($event)\" [ngClass]=\"{'path': !isComplete}\" fill=\"none\" stroke-width=\"4\" stroke-linecap=\"round\" cx=\"36\" cy=\"36\" r=\"32\"></circle>\n </svg>\n    </div>\n\n    \n    </div>\n    `,\n    styles: [`ion-spinner{position:absolute;top:-8px;left:-8px;width:72px;height:72px}.spinner{position:absolute;width:24px;height:24px;left:8px;top:8px}.rotate{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}@-webkit-keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}@keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}.path{stroke-dasharray:187;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors;animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors}.fill{stroke-dasharray:360;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-out fill;animation:1.4s ease-out fill;stroke:#1b9a59}@-webkit-keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@-webkit-keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}.gg-refresher{display:block;width:100%;height:112px;position:relative}.gg-spinner-container{width:40px;height:40px;position:absolute;left:calc(50% - 20px);top:16px;background:var(--ion-color-light);border-radius:50%;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1)}`],\n    animations: [trigger('fabAnim', [\n        transition('void => *', [\n            style({ transform: 'scale(0)' }),\n            animate('250ms ease-out')\n        ]),\n        transition('* => void', [\n            animate('250ms ease-in', style({ transform: 'scale(0)' }))\n        ])\n    ]),\n    trigger('spinnerAnim', [\n        transition('void => *', [\n            style({ opacity: '0' }),\n            animate('250ms ease-out')\n        ]),\n        transition('* => void', [\n            animate('250ms ease-in', style({ opacity: '0' }))\n        ])\n    ]),\n    trigger('rotateAnim', [\n        transition('normal => rotate', [\n            animate('125ms ease-out')\n        ]),\n        transition('rotate => normal', [\n            animate('125ms ease-in')\n        ]),\n        state('rotate', style({ opacity: '0', transform: 'rotateZ(45deg)' })),\n        state('normal', style({ opacity: '1', transform: 'rotateZ(0deg)' }))\n    ]),\n    trigger('fillAnim', [\n        transition('* => fill', [\n            style({\n                'stroke-dasharray': 180,\n                'stroke-dashoffset': 90,\n                'transformOrigin': 'center',\n                'stroke': '#DE3E35'\n            }),\n            animate('800ms ease-out')\n        ]),\n        state('fill', style({\n            'stroke-dasharray': 315,\n            'stroke-dashoffset': 0,\n            'transformOrigin': 'center',\n            'stroke': '#1B9A59',\n            'opacity': 0\n        })\n        )]\n    )],\n\n})\nexport class InfiniteScrollContent implements OnInit {\n\n    @Input() icon: string;\n    @Input() spinColor: string;\n    @Input() fabColor: string;\n    @Input() vertical: string = \"bottom\";\n    @Input() horizontal: string = \"end\";\n    @Input() edge: boolean = false;\n    @Input() checkmark: boolean = false;\n    dragProgress: number = 0;\n    loading: boolean = false;\n    isComplete: boolean = false;\n    iconState: string = 'normal';\n\n    @ViewChild('spinner') spinner: ElementRef;\n\n    @Output() onComplete: EventEmitter<InfiniteScrollContent> = new EventEmitter<InfiniteScrollContent>();\n    @Output() onRefresh: EventEmitter<InfiniteScrollContent> = new EventEmitter<InfiniteScrollContent>();\n\n    constructor(public renderer: Renderer2, public change: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n    }\n\n    toggleSpinner() {\n        if (this.icon != 'md-checkmark') {\n            this.loading = !this.loading;\n        }\n    }\n\n    load() {\n        this.loading = true;\n        this.onRefresh.emit();\n    }\n\n    unload() {\n        this.loading = false;\n    }\n\n    complete() {\n        if (this.loading) {\n            this.isComplete = true;\n\n        }\n    }\n\n    fillAnimationDone(event) {\n        if (event.fromState == 'spinning') {\n            if (this.checkmark) {\n                console.log('fill animation done', event);\n                this.iconState = \"rotate\";\n            } else {\n                this.postComplete();\n            }\n        }\n    }\n\n    changeIconAndReveal(event, icon: string) {\n        console.log(event, icon);\n        if (event.fromState == 'normal') {\n            this.icon = icon;\n            this.iconState = \"normal\";\n        } else {\n            if (event.fromState === \"rotate\") {\n                this.postComplete();\n            }\n\n        }\n    }\n\n    postComplete() {\n        this.unload();\n        this.isComplete = false;\n        this.onComplete.emit(this);\n    }\n\n    public changeProgress(progress: number) {\n        this.dragProgress = progress;\n        const translateY = Math.floor(-80 + 80 * progress);\n        console.log(`translateY(${translateY}px)`);\n        // this.renderer.setStyle(this.spinner.nativeElement, 'transform', `translateY(${translateY})`)\n        this.spinner.nativeElement.style.setProperty('transform', `translateY(${translateY}px)`)\n        this.change.detectChanges();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\nimport { ProgressBar } from './progress-bar/progress-bar.component';\nimport { FabSpinner } from './fab/fab.component';\nimport { ButtonFull } from './button/button.component';\nimport { ItemProgress } from './item/item.component';\nimport { ContentRefresh } from './content/content.component';\nimport { InfiniteScrollContent } from './infinite-scroll-content/infinite-scrollt-content.component';\n\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule\n  ],\n  declarations: [FabSpinner, ProgressBar, ButtonFull,ItemProgress,ContentRefresh,InfiniteScrollContent],\n  exports: [FabSpinner, ProgressBar, ButtonFull, ItemProgress,ContentRefresh,InfiniteScrollContent\n  ]\n})\nexport class LoadingModule { }\n"]}